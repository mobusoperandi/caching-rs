error[E0277]: `Rc<()>` cannot be shared between threads safely
 --> tests/compile_fail/key_type_not_send_nor_sync.rs:6:5
  |
6 |     #[memoized(key_expr = input, store_type = HashMap<Rc<()>, ()>)]
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Rc<()>` cannot be shared between threads safely
  |
  = help: within `(Rc<()>, ())`, the trait `Sync` is not implemented for `Rc<()>`
  = note: required because it appears within the type `(Rc<()>, ())`
  = note: required because of the requirements on the impl of `Sync` for `hashbrown::raw::RawTable<(Rc<()>, ())>`
  = note: required because it appears within the type `hashbrown::map::HashMap<Rc<()>, (), RandomState>`
  = note: required because it appears within the type `HashMap<Rc<()>, ()>`
  = note: required for the cast from `HashMap<Rc<()>, ()>` to the object type `dyn Any + Send + Sync`
  = note: this error originates in the attribute macro `memoized` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `Rc<()>` cannot be sent between threads safely
 --> tests/compile_fail/key_type_not_send_nor_sync.rs:6:5
  |
6 |     #[memoized(key_expr = input, store_type = HashMap<Rc<()>, ()>)]
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Rc<()>` cannot be sent between threads safely
  |
  = help: within `(Rc<()>, ())`, the trait `Send` is not implemented for `Rc<()>`
  = note: required because it appears within the type `(Rc<()>, ())`
  = note: required because of the requirements on the impl of `Send` for `hashbrown::raw::RawTable<(Rc<()>, ())>`
  = note: required because it appears within the type `hashbrown::map::HashMap<Rc<()>, (), RandomState>`
  = note: required because it appears within the type `HashMap<Rc<()>, ()>`
  = note: required for the cast from `HashMap<Rc<()>, ()>` to the object type `dyn Any + Send + Sync`
  = note: this error originates in the attribute macro `memoized` (in Nightly builds, run with -Z macro-backtrace for more info)
