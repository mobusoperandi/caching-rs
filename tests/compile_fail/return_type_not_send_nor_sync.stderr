error[E0277]: `Rc<()>` cannot be sent between threads safely
 --> tests/compile_fail/return_type_not_send_nor_sync.rs:6:5
  |
6 |     #[memoized(key_expr = (), store_type = HashMap<(), Rc<()>>)]
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Rc<()>` cannot be sent between threads safely
  |
  = help: within `((), Rc<()>)`, the trait `Send` is not implemented for `Rc<()>`
  = note: required because it appears within the type `((), Rc<()>)`
  = note: required for `hashbrown::raw::RawTable<((), Rc<()>)>` to implement `Send`
note: required because it appears within the type `HashMap<(), Rc<()>, RandomState>`
 --> $CARGO/hashbrown-0.14.0/src/map.rs
note: required because it appears within the type `HashMap<(), Rc<()>>`
 --> $RUST/std/src/collections/hash/map.rs
  = note: required for the cast from `Box<HashMap<(), Rc<()>>>` to `Box<(dyn Any + Send + Sync + 'static)>`
  = note: this error originates in the attribute macro `memoized` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `Rc<()>` cannot be shared between threads safely
 --> tests/compile_fail/return_type_not_send_nor_sync.rs:6:5
  |
6 |     #[memoized(key_expr = (), store_type = HashMap<(), Rc<()>>)]
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Rc<()>` cannot be shared between threads safely
  |
  = help: within `((), Rc<()>)`, the trait `Sync` is not implemented for `Rc<()>`
  = note: required because it appears within the type `((), Rc<()>)`
  = note: required for `hashbrown::raw::RawTable<((), Rc<()>)>` to implement `Sync`
note: required because it appears within the type `HashMap<(), Rc<()>, RandomState>`
 --> $CARGO/hashbrown-0.14.0/src/map.rs
note: required because it appears within the type `HashMap<(), Rc<()>>`
 --> $RUST/std/src/collections/hash/map.rs
  = note: required for the cast from `Box<HashMap<(), Rc<()>>>` to `Box<(dyn Any + Send + Sync + 'static)>`
  = note: this error originates in the attribute macro `memoized` (in Nightly builds, run with -Z macro-backtrace for more info)
